name: Build macOS Application

on:
  push:
    tags:
      - 'v*'  # 仅在以 'v' 开头的标签时触发

jobs:
  build:
    runs-on: macos-latest

    strategy:
      matrix:
        architecture: [amd64, arm64]  # amd64 for Intel, arm64 for M2

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.23.2'  # 设置 Go 版本

      - name: Build the application
        run: |
          GOARCH=${{ matrix.architecture }} go build -o bin/v2ray_${{ matrix.architecture }} cmd/client/main.go

      - name: Create macOS app bundle
        run: |
          APP_NAME="V2rayPanel"
          APP_DIR="${APP_NAME}.app"
          VERSION="1.0.0"
          
          mkdir -p "${APP_DIR}/Contents/MacOS"
          cp "myapp_${{ matrix.architecture }}" "${APP_DIR}/Contents/MacOS/${APP_NAME}"
          
          # 创建 Info.plist
          cat > "${APP_DIR}/Contents/Info.plist" <<EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleName</key>
              <string>${APP_NAME}</string>
              <key>CFBundleVersion</key>
              <string>${VERSION}</string>
              <key>CFBundleIdentifier</key>
              <string>com.example.${APP_NAME}</string>
              <key>CFBundleExecutable</key>
              <string>${APP_NAME}</string>
          </dict>
          </plist>
          EOL

      - name: Archive the application
        run: |
          zip -r "${APP_NAME}_${{ matrix.architecture }}.zip" "${APP_DIR}"

      - name: Upload the application
        uses: actions/upload-artifact@v4
        with:
          name: "${APP_NAME}_${{ matrix.architecture }}.zip"
          path: "${APP_NAME}_${{ matrix.architecture }}.zip"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}  # 使用当前标签作为 tag_name
          release_name: Release ${{ github.ref }}  # 使用当前标签作为 release_name
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "${APP_NAME}_${{ matrix.architecture }}.zip"
          asset_name: "${APP_NAME}_${{ matrix.architecture }}.zip"
          asset_content_type: application/zip